<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="Real-Logic-SBE"
         default="all"
         basedir="."
         xmlns:artifact="antlib:org.apache.maven.artifact.ant"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless">

    <property file="build.properties"/>
    <property file="build-local.properties"/>
    <property name="module.name" value="sbe"/>
    <property name="module.name.android" value="sbe-android"/>

    <property name="ant.build.javac.source" value="1.6" />
    <property name="ant.build.javac.target" value="1.6" />

    <property name="dir.main.src" location="main/java"/>
    <property name="dir.main.build" location="target/main/java/classes"/>
    <property name="dir.main.lib" location="main/lib"/>

    <property name="dir.test.src" location="test/java"/>
    <property name="dir.test.build" location="target/test/java/classes"/>
    <property name="dir.test.lib" location="test/lib"/>

    <property name="dir.reports" location="target/reports"/>

    <property name="dir.reports.unit" location="target/reports/unit"/>
    <property name="dir.reports.android.unit" location="target/reports/unit-android"/>
    <property name="dir.dist" location="target/dist"/>
    <property name="dir.main.resources" location="main/resources"/>
    <property name="dir.test.resources" location="test/resources"/>

    <property name="dir.reports.checkstyle" location="target/reports/checkstyle"/>
    <property name="checkstyle.lib" location="test/lib/checkstyle-5.6-all.jar"/>
    <property name="checkstyle.config.file" location="test/conf/checkstyle.xml"/>
    <property name="checkstyle.output.file" location="${dir.reports.checkstyle}/results.xml"/>

    <property name="dir.docs.java" value="target/docs/java"/>

    <property name="doxygen.lib" location="main/lib/ant-doxygen-1.6.1.jar"/>
    <property name="maven-ant-tasks.lib" location="main/lib/maven-ant-tasks-2.1.3.jar"/>


    <property name="jar" value="${dir.dist}/${module.name}-${build.version}.jar"/>
    <property name="javadoc.jar" value="${dir.dist}/${module.name}-${build.version}-javadoc.jar"/>
    <property name="sources.jar" value="${dir.dist}/${module.name}-${build.version}-sources.jar"/>

    <property name="ossrh.snapshots.repository.url" value="https://oss.sonatype.org/content/repositories/snapshots"/>
    <property name="ossrh.staging.repository.url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2"/>
    <property name="ossrh.server.id" value="ossrh"/>

    <path id="build.classpath">
        <fileset dir="${dir.main.lib}">
            <include name="gson.jar"/>
        </fileset>
    </path>

    <path id="test.classpath">
        <pathelement path="${dir.main.build}"/>
        <pathelement path="${dir.test.build}"/>
        <pathelement path="${dir.test.resources}"/>
        <fileset dir="${dir.test.lib}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <taskdef resource="checkstyletask.properties" classpath="${checkstyle.lib}"/>

    <taskdef resource="org/doxygen/tools/antlib.xml" classpath="${doxygen.lib}"/>
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="antlib:org.apache.maven.artifact.ant"
             classpath="${maven-ant-tasks.lib}"/>

    <target name="init">
        <tstamp/>
        <mkdir dir="${dir.main.build}"/>
        <mkdir dir="${dir.test.build}"/>
        <mkdir dir="${dir.dist}"/>
        <mkdir dir="${dir.docs.java}"/>
        <mkdir dir="${dir.reports}"/>
        <mkdir dir="${dir.reports.unit}"/>
        <mkdir dir="${dir.reports.checkstyle}"/>
    </target>




    <artifact:pom id="sbe.pom" file="sbe-pom.xml"/>

    <target name="maven.install" depends="clean, checkstyle, build, test, javadoc, dist" description="maven install">
        <artifact:install file="${jar}">
            <artifact:pom refid="sbe.pom"/>
            <artifact:attach file="${sources.jar}" type="jar" classifier="sources"/>
            <artifact:attach file="${javadoc.jar}" type="jar" classifier="javadoc"/>
        </artifact:install>
    </target>

    <target name="maven.deploy" depends="clean, checkstyle, build, test, javadoc, dist" description="maven deploy">
        <artifact:mvn>
            <artifact:arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file"/>
            <artifact:arg value="-Durl=${ossrh.snapshots.repository.url}" />
            <artifact:arg value="-DrepositoryId=${ossrh.server.id}" />
            <artifact:arg value="-DpomFile=sbe-pom.xml" />
            <artifact:arg value="-Dfile=${jar}" />
        </artifact:mvn>
    </target>

    <target name="maven.stage" depends="clean, checkstyle, build, test, javadoc, dist" description="maven stage">
        <artifact:mvn>
            <artifact:arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>
            <artifact:arg value="-Durl=${ossrh.staging.repository.url}" />
            <artifact:arg value="-DrepositoryId=${ossrh.server.id}" />
            <artifact:arg value="-DpomFile=sbe-pom.xml" />
            <artifact:arg value="-Dfile=${jar}" />
            <artifact:arg value="-Pgpg"/>
        </artifact:mvn>
        <artifact:mvn>
            <artifact:arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>
            <artifact:arg value="-Durl=${ossrh.staging.repository.url}" />
            <artifact:arg value="-DrepositoryId=${ossrh.server.id}" />
            <artifact:arg value="-DpomFile=sbe-pom.xml" />
            <artifact:arg value="-Dfile=${sources.jar}" />
            <artifact:arg value="-Dclassifier=sources"/>
            <artifact:arg value="-Pgpg"/>
        </artifact:mvn>
        <artifact:mvn>
            <artifact:arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>
            <artifact:arg value="-Durl=${ossrh.staging.repository.url}" />
            <artifact:arg value="-DrepositoryId=${ossrh.server.id}" />
            <artifact:arg value="-DpomFile=sbe-pom.xml" />
            <artifact:arg value="-Dfile=${javadoc.jar}" />
            <artifact:arg value="-Dclassifier=javadoc"/>
            <artifact:arg value="-Pgpg"/>
        </artifact:mvn>
    </target>

    <target name="checkstyle" depends="init">
        <checkstyle config="${checkstyle.config.file}"
                    failOnViolation="true"
                    maxWarnings="0"
                    maxErrors="0">
            <fileset dir="${dir.main.src}">
                <include name="**/*.java"/>
                <exclude name="**/ir/generated/**"/>
            </fileset>
            <fileset dir="${dir.test.src}">
                <include name="**/*.java"/>
            </fileset>
            <formatter type="plain"/>
            <formatter type="xml" tofile="${checkstyle.output.file}"/>
        </checkstyle>
    </target>

    <target name="clean" description="Delete all existing output">
        <delete dir="target"/>
    </target>

    <target name="build" depends="init" description="Build the main source">
        <javac srcdir="${dir.main.src}" destdir="${dir.main.build}" includeAntRuntime="false" debug="true">
            <classpath refid="build.classpath" />
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-XDignore.symbol.file"/>
        </javac>
    </target>

    <target name="test" depends="build" description="Unit Test">
        <sequential>
            <javac srcdir="${dir.test.src}" destdir="${dir.test.build}" includeAntRuntime="false" debug="true">
                <classpath refid="test.classpath"/>
                <compilerarg value="-Xlint:unchecked"/>
                <compilerarg value="-XDignore.symbol.file"/>
            </javac>
            <junit printsummary="withOutAndErr" errorProperty="test.failed" failureProperty="test.failed" fork="true">
                <sysproperty key="results.dir" value="${dir.reports.unit}"/>
                <classpath refid="test.classpath"/>
                <formatter type="xml"/>
                <formatter type="plain" usefile="false"/>
                <batchtest todir="${dir.reports.unit}">
                    <fileset dir="${dir.test.src}">
                        <include name="**/*Test.java"/>
                    </fileset>
                </batchtest>
            </junit>
            <junitreport todir="${dir.reports.unit}">
                <fileset dir="${dir.reports.unit}">
                    <include name="TEST-*.xml"/>
                </fileset>
                <report todir="${dir.reports.unit}"/>
            </junitreport>
            <fail message="Tests failed. Check log and/or reports." if="test.failed"/>
        </sequential>
    </target>






    <target name="javadoc" depends="build">
        <javadoc sourcepath="${dir.main.src}"
                 destdir="${dir.docs.java}"
                 overview="${dir.main.src}/overview.html"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="Simple Binary Encoding">
            <arg value="-XDignore.symbol.file"/>
            <link href="http://docs.oracle.com/javase/7/docs/api/"/>
            <doctitle><![CDATA[<h1>Simple Binary Encoding</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2013 Real Logic Ltd. All Rights Reserved.</i>]]></bottom>
        </javadoc>
    </target>

    <target name="dist" depends="build, javadoc" description="Generate the distribution">
        <jar destfile="${jar}">
            <manifest>
                <attribute name="Main-Class" value="uk.co.real_logic.sbe.SbeTool"/>
            </manifest>
            <fileset dir="${dir.main.build}"/>
        </jar>
        <jar destfile="${javadoc.jar}">
            <fileset dir="${dir.docs.java}"/>
        </jar>
        <jar destfile="${sources.jar}">
            <fileset dir="${dir.main.src}"/>
        </jar>

        <!-- Copying SbeTool to a constant name (without timestamp and version number, which makes life easier for other builds..) -->
        <copy file="${jar}" tofile="${dir.dist}/sbe.jar" preservelastmodified="true"/>
    </target>


    <target name="all" depends="clean, checkstyle, build, test, javadoc, dist"/>

    <!-- SBE Serialized IR targets -->

    <path id="sbetool.classpath">
        <fileset dir="${dir.dist}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <macrodef name="sbetool">
        <attribute name="outputdir"/>
        <attribute name="targetlanguage" default=""/>
        <attribute name="targetnamespace" default=""/>
        <attribute name="generatestubs" default=""/>
        <attribute name="generateir" default=""/>
        <attribute name="validationxsd" default=""/>
        <attribute name="stoponerror" default=""/>
        <element name="schemafiles" implicit="yes"/>
        <sequential>
            <java jar="${jar}" failonerror="true" fork="true">
                <sysproperty key="sbe.output.dir" value="@{outputdir}"/>
                <sysproperty key="sbe.target.language" value="@{targetlanguage}" unless:blank="@{targetlanguage}"/>
                <sysproperty key="sbe.target.namespace" value="@{targetnamespace}" unless:blank="@{targetnamespace}"/>
                <sysproperty key="sbe.generate.stubs" value="@{generatestubs}" unless:blank="@{generatestubs}"/>
                <sysproperty key="sbe.generate.ir" value="@{generateir}" unless:blank="@{generateir}"/>
                <sysproperty key="sbe.validation.xsd" value="@{validationxsd}" unless:blank="@{validationxsd}"/>
                <sysproperty key="sbe.validation.stop.on.error" value="@{stoponerror}" unless:blank="@{stoponerror}"/>
                <schemafiles/>
            </java>
        </sequential>
    </macrodef>

    <target name="generate:java:sbeir-stubs"
            depends="dist"
            description="Generate serialized IR stubs for Java">
        <sbetool outputdir="${dir.main.src}" targetlanguage="Java">
            <arg value="${dir.main.resources}/sbe-ir.xml"/>
        </sbetool>
    </target>

    <target name="generate:sbeir-stubs"
            depends="generate:java:sbeir-stubs"
            description="Generate serialized IR code for all languages"/>

    <!-- SBE Examples targets -->

    <property name="dir.examples.src" value="examples/java"/>
    <property name="dir.examples.resources" value="examples/resources"/>
    <property name="dir.gen.java" value="target/gen/java"/>
    <property name="dir.examples.build" location="target/examples/java/classes"/>


    <path id="examples.classpath">
        <pathelement path="${dir.examples.build}"/>
        <fileset dir="${dir.dist}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <target name="examples:java"
            depends="dist">
        <mkdir dir="${dir.gen.java}"/>
        <mkdir dir="${dir.examples.build}"/>
        <sbetool outputdir="${dir.gen.java}" targetlanguage="Java" stoponerror="true"
            validationxsd="main/resources/fpl/SimpleBinary1-0.xsd">
            <arg value="${dir.examples.resources}/example-schema.xml"/>
            <arg value="${dir.examples.resources}/example-extension-schema.xml"/>
        </sbetool>
        <javac srcdir="${dir.gen.java}" destdir="${dir.examples.build}" includeAntRuntime="false" debug="true">
            <classpath refid="examples.classpath"/>
        </javac>
        <javac srcdir="${dir.examples.src}" destdir="${dir.examples.build}" includeAntRuntime="false" debug="true">
            <classpath refid="examples.classpath"/>
        </javac>
        <java classname="uk.co.real_logic.sbe.examples.ExampleUsingGeneratedStub" failonerror="true" fork="true">
            <classpath refid="examples.classpath"/>
        </java>
        <java classname="uk.co.real_logic.sbe.examples.ExampleUsingGeneratedStubExtension" failonerror="true" fork="true">
            <classpath refid="examples.classpath"/>
        </java>
        <java classname="uk.co.real_logic.sbe.examples.OtfExample" failonerror="true" fork="true">
            <classpath refid="examples.classpath"/>
        </java>
    </target>


    <target name="update:gtest" depends="">
        <sequential>
            <local name="gtest.name"/>
            <local name="sha.fail"/>
            <local name="cksum.fail"/>
            <property name="gtest.name" value="gtest-1.7.0.zip"/>
            <get dest="/tmp">
                <url url="https://googletest.googlecode.com/files/${gtest.name}"/>
            </get>
            <checksum file="/tmp/${gtest.name}"
                      algorithm="sha1"
                      property="f85f6d2481e2c6c4a18539e391aa4ea8ab0394af"
                      verifyproperty="sha.fail"/>
            <condition property="cksum.fail">
                <equals arg1="${sha.fail}" arg2="false"/>
            </condition>
            <fail if="cksum.fail">Checksum failed</fail>
            <copy file="/tmp/${gtest.name}" todir="test/lib"/>
        </sequential>
    </target>

    <target name="gtest:unzip" depends="init">
        <unzip src="test/lib/gtest-1.7.0.zip" dest="target/test/cpp"/>
    </target>
</project>
