<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="Real-Logic-SBE"
         default="all"
         basedir="."
         xmlns:artifact="antlib:org.apache.maven.artifact.ant"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless">

    <property file="build.properties"/>
    <property file="build-local.properties"/>
    <property name="module.name" value="sbe"/>
    <property name="module.name.android" value="sbe-android"/>

    <property name="ant.build.javac.source" value="1.6" />
    <property name="ant.build.javac.target" value="1.6" />

    <property name="dir.main.src" location="main/java"/>
    <property name="dir.main.build" location="target/main/java/classes"/>
    <property name="dir.main.lib" location="main/lib"/>

    <property name="dir.test.src" location="test/java"/>
    <property name="dir.test.build" location="target/test/java/classes"/>
    <property name="dir.test.lib" location="test/lib"/>

    <property name="dir.main.android.src" location="main/android"/>
    <property name="dir.main.android.build" location="target/main/android/classes"/>
    <property name="dir.main.android.libcore.build" location="target/main/android/libcoreclasses"/>

    <property name="dir.test.android.src" location="test/android"/>
    <property name="dir.test.android.build" location="target/test/android/classes"/>
    <property name="dir.test.android.dexedLibs" location="target/test/android/dexedLibs"/>
    <property name="dir.test.android.testpackage" location="target/test/android/testpackage"/>
    <property name="dir.test.android.lib" location="${dir.test.lib}"/>
    <property name="file.test.android.debugkey" location="target/test/android/debug.keystore"/>
    <property name="file.test.android.testapk.unsigned" location="target/test/android/sbe-android-test-unsigned.apk"/>
    <property name="file.test.android.testapk.signed" location="target/test/android/sbe-android-test-signed.apk" />
    <property name="file.test.android.testapk.final" location="target/test/android/sbe-android-test-final.apk" />
    <property name="file.test.android.manifest" location="test/conf/AndroidManifest.xml"/>

    <property name="dir.reports" location="target/reports"/>

    <property name="dir.reports.unit" location="target/reports/unit"/>
    <property name="dir.reports.android.unit" location="target/reports/unit-android"/>
    <property name="dir.dist" location="target/dist"/>
    <property name="dir.main.resources" location="main/resources"/>
    <property name="dir.test.resources" location="test/resources"/>

    <property name="dir.reports.checkstyle" location="target/reports/checkstyle"/>
    <property name="checkstyle.lib" location="test/lib/checkstyle-5.6-all.jar"/>
    <property name="checkstyle.config.file" location="test/conf/checkstyle.xml"/>
    <property name="checkstyle.output.file" location="${dir.reports.checkstyle}/results.xml"/>

    <property name="dir.docs.java" value="target/docs/java"/>
    <property name="dir.docs.android" value="target/docs/android"/>
    <property name="dir.docs.cpp" value="target/docs/cpp"/>

    <property name="cpptasks.lib" location="main/lib/cpptasks-1.0b5.jar"/>
    <property name="doxygen.lib" location="main/lib/ant-doxygen-1.6.1.jar"/>
    <property name="maven-ant-tasks.lib" location="main/lib/maven-ant-tasks-2.1.3.jar"/>

    <property name="dir.main.cpp.src" location="main/cpp"/>
    <property name="dir.main.cpp.build" location="target/main/cpp/obj"/>
    <property name="dir.gtest.src" location="target/test/cpp/gtest-1.7.0"/>
    <property name="dir.gtest.include" location="target/test/cpp/gtest-1.7.0/include"/>
    <property name="dir.gtest.build" location="target/test/cpp/gtest/obj"/>
    <property name="dir.test.cpp.src" location="test/cpp"/>
    <property name="dir.test.cpp.include" location="test/cpp"/>
    <property name="dir.exec.test.cpp" location="target/test/cpp"/>
    <property name="exec.test.cpp" location="${dir.exec.test.cpp}/gtest-runner"/>

    <property name="dir.main.csharp.src" location="main/csharp/ir/generated"/>

    <property name="jar" value="${dir.dist}/${module.name}-${build.version}.jar"/>
    <property name="javadoc.jar" value="${dir.dist}/${module.name}-${build.version}-javadoc.jar"/>
    <property name="sources.jar" value="${dir.dist}/${module.name}-${build.version}-sources.jar"/>

    <property name="android.libcore.io.memory.jar" value="main/lib/android/libcore.io.memory.jar"/>
    <property name="sbe.android.jar" value="${dir.dist}/${module.name.android}-${build.version}.jar"/>
    <property name="sbe.android.javadoc.jar" value="${dir.dist}/${module.name.android}-${build.version}-javadoc.jar"/>
    <property name="sbe.android.sources.jar" value="${dir.dist}/${module.name.android}-${build.version}-sources.jar"/>

    <property name="ossrh.snapshots.repository.url" value="https://oss.sonatype.org/content/repositories/snapshots"/>
    <property name="ossrh.staging.repository.url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2"/>
    <property name="ossrh.server.id" value="ossrh"/>

    <path id="build.classpath">
        <fileset dir="${dir.main.lib}">
            <include name="gson.jar"/>
        </fileset>
    </path>

    <path id="test.classpath">
        <pathelement path="${dir.main.build}"/>
        <pathelement path="${dir.test.build}"/>
        <pathelement path="${dir.test.resources}"/>
        <fileset dir="${dir.test.lib}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="android.test.classpath">
        <pathelement path="${dir.main.android.build}"/>
        <pathelement path="${dir.test.android.build}"/>
        <pathelement path="${dir.test.resources}"/>
        <fileset dir="${dir.test.lib}">
            <include name="*.jar"/>
            <include name="android/*.jar"/>
        </fileset>
    </path>

    <taskdef resource="checkstyletask.properties" classpath="${checkstyle.lib}"/>
    <taskdef resource="cpptasks.tasks" classpath="${cpptasks.lib}"/>
    <taskdef resource="cpptasks.types" classpath="${cpptasks.lib}"/>
    <taskdef resource="org/doxygen/tools/antlib.xml" classpath="${doxygen.lib}"/>
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="antlib:org.apache.maven.artifact.ant"
             classpath="${maven-ant-tasks.lib}"/>

    <target name="init">
        <tstamp/>
        <mkdir dir="${dir.main.build}"/>
        <mkdir dir="${dir.test.build}"/>
        <mkdir dir="${dir.dist}"/>
        <mkdir dir="${dir.docs.java}"/>
        <mkdir dir="${dir.docs.cpp}"/>
        <mkdir dir="${dir.reports}"/>
        <mkdir dir="${dir.reports.unit}"/>
        <mkdir dir="${dir.reports.checkstyle}"/>
        <mkdir dir="${dir.main.cpp.build}"/>
        <mkdir dir="${dir.gtest.build}"/>
        <condition property="windows">
            <os family="windows"/>
        </condition>
    </target>

    <target name="-android:init" depends="init">
        <fail unless="android.sdk.dir" message="android.sdk.dir is not defined (please add a build-local.properties and define it."/>
        <fail unless="android.target" message="android.target is not defined (please add a build-local.properties and define it."/>
        <fail unless="android.build.tools.version" message="android.build.tools.version is not defined (please add a build-local.properties and define it."/>
        <property name="android.jar" value="${android.sdk.dir}/platforms/${android.target}/android.jar" />
        <property name="android.bootclasspath" value="${android.jar}" />
        <property name="dx.jar" value="${android.sdk.dir}/build-tools/${android.build.tools.version}/lib/dx.jar" />
        <condition property="exe" value=".exe" else=""><os family="windows" /></condition>
        <property name="aapt.exe" value="${android.sdk.dir}/build-tools/${android.build.tools.version}/aapt${exe}" />
        <property name="zipalign.exe" value="${android.sdk.dir}/build-tools/${android.build.tools.version}/zipalign${exe}" />
        <property name="adb.exe" value="${android.sdk.dir}/platform-tools/adb${exe}" />
        <mkdir dir="${dir.dist}"/>
        <mkdir dir="${dir.main.android.build}"/>
        <mkdir dir="${dir.main.android.libcore.build}"/>
        <mkdir dir="${dir.test.android.build}"/>
        <mkdir dir="${dir.test.android.dexedLibs}"/>
        <mkdir dir="${dir.test.android.testpackage}"/>
        <mkdir dir="${dir.reports}"/>
        <mkdir dir="${dir.reports.android.unit}"/>
        <mkdir dir="${dir.docs.android}"/>
    </target>

    <target name="-android:checkDebugKey">
        <available file="${file.test.android.debugkey}" property="keystore.present" type="file"/>
    </target>

    <target name="-android:generateDebugKey" depends="-android:init,-android:checkDebugKey" unless="keystore.present">
        <echo message="generatingKeyStore" />
        <genkey keystore="${file.test.android.debugkey}" storepass="android" alias="androiddebugkey"
            keyalg="RSA" validity="10000" dname="CN=CA"/>
    </target>

    <artifact:pom id="sbe.pom" file="sbe-pom.xml"/>

    <target name="maven.install" depends="clean, checkstyle, build, test, javadoc, dist" description="maven install">
        <artifact:install file="${jar}">
            <artifact:pom refid="sbe.pom"/>
            <artifact:attach file="${sources.jar}" type="jar" classifier="sources"/>
            <artifact:attach file="${javadoc.jar}" type="jar" classifier="javadoc"/>
        </artifact:install>
    </target>

    <target name="maven.deploy" depends="clean, checkstyle, build, test, javadoc, dist" description="maven deploy">
        <artifact:mvn>
            <artifact:arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file"/>
            <artifact:arg value="-Durl=${ossrh.snapshots.repository.url}" />
            <artifact:arg value="-DrepositoryId=${ossrh.server.id}" />
            <artifact:arg value="-DpomFile=sbe-pom.xml" />
            <artifact:arg value="-Dfile=${jar}" />
        </artifact:mvn>
    </target>

    <target name="maven.stage" depends="clean, checkstyle, build, test, javadoc, dist" description="maven stage">
        <artifact:mvn>
            <artifact:arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>
            <artifact:arg value="-Durl=${ossrh.staging.repository.url}" />
            <artifact:arg value="-DrepositoryId=${ossrh.server.id}" />
            <artifact:arg value="-DpomFile=sbe-pom.xml" />
            <artifact:arg value="-Dfile=${jar}" />
            <artifact:arg value="-Pgpg"/>
        </artifact:mvn>
        <artifact:mvn>
            <artifact:arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>
            <artifact:arg value="-Durl=${ossrh.staging.repository.url}" />
            <artifact:arg value="-DrepositoryId=${ossrh.server.id}" />
            <artifact:arg value="-DpomFile=sbe-pom.xml" />
            <artifact:arg value="-Dfile=${sources.jar}" />
            <artifact:arg value="-Dclassifier=sources"/>
            <artifact:arg value="-Pgpg"/>
        </artifact:mvn>
        <artifact:mvn>
            <artifact:arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>
            <artifact:arg value="-Durl=${ossrh.staging.repository.url}" />
            <artifact:arg value="-DrepositoryId=${ossrh.server.id}" />
            <artifact:arg value="-DpomFile=sbe-pom.xml" />
            <artifact:arg value="-Dfile=${javadoc.jar}" />
            <artifact:arg value="-Dclassifier=javadoc"/>
            <artifact:arg value="-Pgpg"/>
        </artifact:mvn>
    </target>

    <target name="checkstyle" depends="init">
        <checkstyle config="${checkstyle.config.file}"
                    failOnViolation="true"
                    maxWarnings="0"
                    maxErrors="0">
            <fileset dir="${dir.main.src}">
                <include name="**/*.java"/>
                <exclude name="**/ir/generated/**"/>
            </fileset>
            <fileset dir="${dir.main.android.src}">
                <include name="**/*.java"/>
                <exclude name="**/ir/generated/**"/>
                <exclude name="libcore/**/*.java"/>
            </fileset>
            <fileset dir="${dir.test.src}">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${dir.test.android.src}">
                <include name="**/*.java"/>
            </fileset>
            <formatter type="plain"/>
            <formatter type="xml" tofile="${checkstyle.output.file}"/>
        </checkstyle>
    </target>

    <target name="clean" description="Delete all existing output">
        <delete dir="target"/>
    </target>

    <target name="build" depends="init" description="Build the main source">
        <javac srcdir="${dir.main.src}" destdir="${dir.main.build}" includeAntRuntime="false" debug="true">
            <classpath refid="build.classpath" />
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-XDignore.symbol.file"/>
        </javac>
    </target>

    <target name="test" depends="build" description="Unit Test">
        <sequential>
            <javac srcdir="${dir.test.src}" destdir="${dir.test.build}" includeAntRuntime="false" debug="true">
                <classpath refid="test.classpath"/>
                <compilerarg value="-Xlint:unchecked"/>
                <compilerarg value="-XDignore.symbol.file"/>
            </javac>
            <junit printsummary="withOutAndErr" errorProperty="test.failed" failureProperty="test.failed" fork="true">
                <sysproperty key="results.dir" value="${dir.reports.unit}"/>
                <classpath refid="test.classpath"/>
                <formatter type="xml"/>
                <formatter type="plain" usefile="false"/>
                <batchtest todir="${dir.reports.unit}">
                    <fileset dir="${dir.test.src}">
                        <include name="**/*Test.java"/>
                    </fileset>
                </batchtest>
            </junit>
            <junitreport todir="${dir.reports.unit}">
                <fileset dir="${dir.reports.unit}">
                    <include name="TEST-*.xml"/>
                </fileset>
                <report todir="${dir.reports.unit}"/>
            </junitreport>
            <fail message="Tests failed. Check log and/or reports." if="test.failed"/>
        </sequential>
    </target>

    <target name="androidlibcore:build" depends="-android:init" description="Build the jar containin libcore.io.Memory class">
        <sequential>
            <javac srcdir="${dir.main.android.src}" destdir="${dir.main.android.libcore.build}" includeAntRuntime="false" debug="true"
                bootclasspath="${android.bootclasspath}" source="1.6" target="1.6">
                <include name="libcore/**/*.java"/>
                <compilerarg value="-Xlint:unchecked"/>
                <compilerarg value="-XDignore.symbol.file"/>
            </javac>
            <jar destfile="${android.libcore.io.memory.jar}">
                <fileset dir="${dir.main.android.src}" includes="libcore/,NOTICE"/>
                <fileset dir="${dir.main.android.libcore.build}"/>
            </jar>
        </sequential>
    </target>

    <target name="android:build" depends="-android:init" description="Build the android source">
        <sequential>
            <javac srcdir="${dir.main.android.src}" destdir="${dir.main.android.build}" includeAntRuntime="false" debug="true"
                bootclasspath="${android.bootclasspath}">
                <include name="uk/co/real_logic/sbe/codec/java/**/*.java"/>
                <classpath path="${android.libcore.io.memory.jar}"/>
                <compilerarg value="-Xlint:unchecked"/>
                <compilerarg value="-XDignore.symbol.file"/>
            </javac>
            <javac srcdir="${dir.main.src}" destdir="${dir.main.android.build}" includeAntRuntime="false" debug="true"
                bootclasspath="${android.bootclasspath}">
                <exclude name="uk/co/real_logic/sbe/codec/java/**/*.java"/>
                <!-- Code generator classes may be excluded -->
                <exclude name="uk/co/real_logic/sbe/SbeTool.java"/>
                <exclude name="uk/co/real_logic/sbe/generation/**/*.java"/>
                <classpath path="${dir.main.android.build}"/>
                <classpath path="${android.libcore.io.memory.jar}"/>
                <compilerarg value="-Xlint:unchecked"/>
                <compilerarg value="-XDignore.symbol.file"/>
            </javac>
        </sequential>
    </target>

    <macrodef name="dex">
        <attribute name="destfile" default="classes.dex"/>
        <attribute name="src"/>
        <sequential>
            <local name="dexuptodate"/>
            <local name="isFile"/>
            <local name="isDirectory"/>
            <available file="@{src}" type="file" property="isFile"/>
            <available file="@{src}" type="dir" property="isDirectory"/>
            <uptodate property="dexuptodate" srcfile="@{src}" targetfile="@{destfile}" if:true="${isFile}"/>
            <uptodate property="dexuptodate" targetfile="@{destfile}" if:true="${isDirectory}">
                <srcresources>
                    <fileset dir="@{src}"/>
                    <dirset dir="@{src}"/>
                </srcresources>
            </uptodate>
            <echo taskname="dex" message="@{src} -> @{destfile}"/>
            <echo taskname="dex" message="@{destfile} already up to date." if:true="${dexuptodate}"/>
            <java taskname="dex" fork="yes" jar="${dx.jar}" failonerror="true" unless:true="${dexuptodate}">
                <arg value="--dex"/>
                <arg value="--output"/>
                <arg value="@{destfile}"/>
                <arg line="@{src}"/>
            </java>
        </sequential>
    </macrodef>

    <macrodef name="aapt">
        <attribute name="manifest" default="${file.test.android.manifest}"/>
        <attribute name="android.jar" default="${android.jar}"/>
        <attribute name="apk"/>
        <attribute name="srcdir"/>
        <sequential>
            <echo taskname="aapt" message="Creating: @{apk}"/>
            <exec taskname="aapt" executable="${aapt.exe}" failonerror="true">
                <arg value="package"/>
                <arg value="--debug-mode"/>
                <arg value="-f"/>
                <arg value="-v"/>
                <arg value="-M"/>
                <arg path="@{manifest}"/>
                <arg value="-I"/>
                <arg path="@{android.jar}"/>
                <arg value="-F"/>
                <arg path="@{apk}"/>
                <arg path="@{srcdir}"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="zipalign">
        <attribute name="srcfile"/>
        <attribute name="destfile"/>
        <sequential>
            <echo taskname="zipalign" message="Aligning @{srcfile}"/>
            <exec taskname="zipalign" executable="${zipalign.exe}" failonerror="true">
                <arg value="-f"/>
                <arg value="-v"/>
                <arg value="4"/>
                <arg path="@{srcfile}"/>
                <arg path="@{destfile}"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="adb">
        <attribute name="command"/>
        <attribute name="description" default=""/>
        <attribute name="outputproperty" default=""/>
        <attribute name="resultproperty" default=""/>
        <attribute name="failonerror" default="true"/>
        <element name="args" implicit="yes" />
        <sequential>
            <echo taskname="adb" message="Running @{command}: @{description}"/>
            <exec taskname="adb" executable="${adb.exe}" failonerror="@{failonerror}"
                resultproperty="@{resultproperty}">
                <redirector outputproperty="@{outputproperty}" alwayslog="true"/>
                <arg value="@{command}"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <target name="android:build:testpackage" depends="android:build, -android:init, -android:generateDebugKey" description="Build Android Unit Tests Package">
        <sequential>
            <javac srcdir="${dir.test.android.src}" destdir="${dir.test.android.build}" includeAntRuntime="false" debug="true"
                bootclasspath="${android.bootclasspath}">
                <include name="uk/co/real_logic/sbe/codec/java/**/*.java"/>
                <classpath refid="android.test.classpath"/>
                <compilerarg value="-Xlint:unchecked"/>
                <compilerarg value="-XDignore.symbol.file"/>
            </javac>
            <!--
                 Ideally, we would want to compile/run all the test on the android platform too.
                 The test package "uk/co/real_logic/sbe/generation" won't compile against android,
                 because android is missing "javax.tools" and "java.nio.file" packages.
                 Nevertheless, we don't need to run the code generator tests on android,
                 because no code will be generated on android platform
            -->
            <javac srcdir="${dir.test.src}" destdir="${dir.test.android.build}" includeAntRuntime="false" debug="true"
                bootclasspath="${android.bootclasspath}">
                <exclude name="uk/co/real_logic/sbe/codec/java/**/*.java"/>
                <!-- Code generator classes may be excluded -->
                <exclude name="uk/co/real_logic/sbe/SbeToolTest.java"/>
                <exclude name="uk/co/real_logic/sbe/generation/**/*.java"/>
                <classpath refid="android.test.classpath"/>
                <compilerarg value="-Xlint:unchecked"/>
                <compilerarg value="-XDignore.symbol.file"/>
            </javac>

            <dex src="${dir.test.lib}/android/android-junit4-0.5.jar" destfile="${dir.test.android.dexedLibs}/android-junit4-0.5-dexed.jar"/>
            <dex src="${dir.test.lib}/junit-4.11.jar" destfile="${dir.test.android.dexedLibs}/junit-4.11-dexed.jar"/>
            <dex src="${dir.test.lib}/hamcrest-core-1.3.jar" destfile="${dir.test.android.dexedLibs}/hamcrest-core-1.3-dexed.jar"/>
            <dex src="${dir.test.lib}/hamcrest-library-1.3.jar" destfile="${dir.test.android.dexedLibs}/hamcrest-library-1.3-dexed.jar"/>
            <dex src="${dir.test.lib}/mockito-core-1.9.5.jar" destfile="${dir.test.android.dexedLibs}/mockito-core-1.9.5-dexed.jar"/>
            <dex src="${dir.test.lib}/android/dexmaker-1.1.jar" destfile="${dir.test.android.dexedLibs}/dexmaker-1.1-dexed.jar"/>
            <dex src="${dir.test.lib}/android/dexmaker-mockito-1.1.jar" destfile="${dir.test.android.dexedLibs}/dexmaker-mockito-1.1-dexed.jar"/>
            <dex src="${dir.test.lib}/objenesis-2.1.jar" destfile="${dir.test.android.dexedLibs}/objenesis-2.1-dexed.jar"/>
            <dex src="${dir.test.android.build}" destfile="${dir.test.android.dexedLibs}/sbe-test-dexed.jar"/>
            <dex src="${dir.main.android.build}" destfile="${dir.test.android.dexedLibs}/sbe-main-dexed.jar"/>
            <dex src="${dir.test.android.dexedLibs}" destfile="${dir.test.android.testpackage}/classes.dex"/>

            <copy todir="${dir.test.android.testpackage}" failonerror="true" preservelastmodified="true">
               <fileset dir="${dir.test.resources}"/>
            </copy>
            <local name="apkuptodate"/>
            <uptodate property="apkuptodate" targetfile="${file.test.android.testapk.final}">
                <srcresources>
                    <fileset file="${file.test.android.manifest}"/>
                    <fileset dir="${dir.test.android.testpackage}"/>
                    <dirset dir="${dir.test.android.testpackage}"/>
                </srcresources>
            </uptodate>
            <echo message="${file.test.android.testapk.final} already up to date." if:true="${apkuptodate}"/>
            <sequential unless:true="${apkuptodate}">
                <aapt apk="${file.test.android.testapk.unsigned}"
                      srcdir="${dir.test.android.testpackage}"/>
                <signjar keystore="${file.test.android.debugkey}" storepass="android" alias="androiddebugkey"
                    jar="${file.test.android.testapk.unsigned}" signedjar="${file.test.android.testapk.signed}"
                    verbose="true" sigalg="SHA1withRSA" digestalg="SHA1" preservelastmodified="true"/>
                <zipalign srcfile="${file.test.android.testapk.signed}" destfile="${file.test.android.testapk.final}"/>
            </sequential>
        </sequential>
    </target>

    <target name="android:test" depends="android:build:testpackage">
        <sequential>
            <property name="project.app.package" value="uk.co.real_logic.sbe.android.test"/>
            <property name="test.runner" value="com.uphyca.testing.JUnit4XMLInstrumentationTestRunner"/>
            <adb command="install">
                <arg value="-r"/>
                <arg path="${file.test.android.testapk.final}"/>
            </adb>
            <adb command="shell" description="Running tests">
                <arg line="am instrument -w -e xml true ${project.app.package}/${test.runner}"/>
            </adb>
            <!-- trying to get the test-results.xml file from one of the 2 possible locations-->
            <!-- /data/data/${project.app.package}/files/test-results.xml -->
            <!-- $EXTERNAL_STORAGE/Android/data/uk.co.real_logic.sbe.android.test/files/test-results.xml -->
            <adb command="shell" outputproperty="EXTERNAL_STORAGE" description="Get EXTERNAL_STORAGE property value">
                <arg line="echo $EXTERNAL_STORAGE"/>
            </adb>
            <adb command="shell" outputproperty="FILE_ON_EXTERNAL_STORAGE" description="Check if test-results.xml file is present on the external storage">
                <arg line="ls ${EXTERNAL_STORAGE}/Android/data/uk.co.real_logic.sbe.android.test/files/test-results.xml >/dev/null 2>&amp;1 &amp;&amp; echo true || echo false"/>
            </adb>
            <property name="test-results"
                value="${EXTERNAL_STORAGE}/Android/data/uk.co.real_logic.sbe.android.test/files/test-results.xml"
                if:true="${FILE_ON_EXTERNAL_STORAGE}"/>
            <property name="test-results"
                value="/data/data/uk.co.real_logic.sbe.android.test/files/test-results.xml"
                unless:true="${FILE_ON_EXTERNAL_STORAGE}"/>
            <adb command="shell">
                <arg line="run-as ${project.app.package} chmod 644 ${test-results}"/>
            </adb>
            <adb command="pull" description="Pulling the test results from: ${test-results}">
                <arg value="${test-results}"/>
                <arg path="${dir.reports.android.unit}/test-results.xml"/>
            </adb>
            <adb command="uninstall">
                <arg value="${project.app.package}"/>
            </adb>
        </sequential>
    </target>

    <target name="android:javadoc" depends="android:build">
        <javadoc destdir="${dir.docs.android}"
                 overview="${dir.main.src}/overview.html"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="Simple Binary Encoding (Android)"
                 bootclasspath="${android.bootclasspath}">
            <classpath path="${android.libcore.io.memory.jar}"/>
            <fileset dir="${dir.main.src}" >
                <include name="**/*.java"/>
                <exclude name="uk/co/real_logic/sbe/codec/java/**/*.java"/>
                <!-- Code generator classes may be excluded -->
                <exclude name="uk/co/real_logic/sbe/SbeTool.java"/>
                <exclude name="uk/co/real_logic/sbe/generation/**/*.java"/>
            </fileset>
                <fileset dir="${dir.main.android.src}">
                <include name="uk/co/real_logic/sbe/codec/java/**/*.java"/>
            </fileset>
            <arg value="-XDignore.symbol.file"/>
            <link href="http://docs.oracle.com/javase/7/docs/api/"/>
            <link offline="true" href="http://d.android.com/reference" packagelistloc="${android.sdk.dir}/docs/reference"/>
            <doctitle><![CDATA[<h1>Simple Binary Encoding (Android)</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2013 Real Logic Ltd. All Rights Reserved.</i>]]></bottom>
        </javadoc>
    </target>

    <target name="javadoc" depends="build">
        <javadoc sourcepath="${dir.main.src}"
                 destdir="${dir.docs.java}"
                 overview="${dir.main.src}/overview.html"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="Simple Binary Encoding">
            <arg value="-XDignore.symbol.file"/>
            <link href="http://docs.oracle.com/javase/7/docs/api/"/>
            <doctitle><![CDATA[<h1>Simple Binary Encoding</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2013 Real Logic Ltd. All Rights Reserved.</i>]]></bottom>
        </javadoc>
    </target>

    <target name="cpp:doc" depends="build" description="Generate doc for OTF C++ Decoder">
        <doxygen>
            <property name="INPUT" value="${dir.main.cpp.src}/otf_api"/>
            <property name="OUTPUT_DIRECTORY" value="${dir.docs.cpp}"/>
            <property name="RECURSIVE" value="YES"/>
            <property name="GENERATE_LATEX" value="false"/>
            <property name="PROJECT_NAME" value="Simple Binary Encoding"/>
            <property name="PROJECT_NUMBER" value="${build.version}"/>
            <property name="EXAMPLE_PATH" value="${dir.examples.cpp98.src}/SbeOtfDecoder.cpp"/>
            <property name="WARNINGS" value="YES"/>
            <property name="FILE_PATTERNS" value="*.h"/>
            <property name="OPTIMIZE_OUTPUT_FOR_C" value="YES"/>
            <property name="OPTIMIZE_OUTPUT_FOR_JAVA" value="NO"/>
            <property name="FULL_PATH_NAMES" value="NO"/>
            <property name="HTML_OUTPUT" value="${module.name}-otfcpp-doc-${build.version}"/>
        </doxygen>
    </target>

    <target name="dist" depends="build, javadoc" description="Generate the distribution">
        <jar destfile="${jar}">
            <manifest>
                <attribute name="Main-Class" value="uk.co.real_logic.sbe.SbeTool"/>
            </manifest>
            <fileset dir="${dir.main.build}"/>
        </jar>
        <jar destfile="${javadoc.jar}">
            <fileset dir="${dir.docs.java}"/>
        </jar>
        <jar destfile="${sources.jar}">
            <fileset dir="${dir.main.src}"/>
        </jar>

        <!-- Copying SbeTool to a constant name (without timestamp and version number, which makes life easier for other builds..) -->
        <copy file="${jar}" tofile="${dir.dist}/sbe.jar" preservelastmodified="true"/>
    </target>

    <target name="android:dist" depends="android:build, android:javadoc" description="Generate the distribution">
        <jar destfile="${sbe.android.jar}">
            <fileset dir="${dir.main.android.build}" excludes="libcore/"/>
        </jar>
        <jar destfile="${sbe.android.sources.jar}">
            <fileset dir="${dir.main.src}">
                <exclude name="uk/co/real_logic/sbe/codec/java/**/*.java"/>
                <!-- Code generator classes may be excluded -->
                <exclude name="uk/co/real_logic/sbe/SbeTool.java"/>
                <exclude name="uk/co/real_logic/sbe/generation/**/*.java"/>
            </fileset>
            <fileset dir="${dir.main.android.src}">
                <include name="uk/co/real_logic/sbe/codec/java/**/*.java"/>
            </fileset>
        </jar>
        <jar destfile="${sbe.android.javadoc.jar}">
            <fileset dir="${dir.docs.android}"/>
        </jar>
    </target>

    <target name="cpp:dist" depends="cpp:compile, cpp:doc">
        <zip destfile="${dir.dist}/${module.name}-otfcpp-doc-${build.version}.zip">
            <fileset dir="${dir.docs.cpp}"/>
        </zip>
    </target>


    <target name="all" depends="clean, checkstyle, build, test, javadoc, dist"/>

    <!-- SBE Serialized IR targets -->

    <path id="sbetool.classpath">
        <fileset dir="${dir.dist}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <macrodef name="sbetool">
        <attribute name="outputdir"/>
        <attribute name="targetlanguage" default=""/>
        <attribute name="targetnamespace" default=""/>
        <attribute name="generatestubs" default=""/>
        <attribute name="generateir" default=""/>
        <attribute name="validationxsd" default=""/>
        <attribute name="stoponerror" default=""/>
        <element name="schemafiles" implicit="yes"/>
        <sequential>
            <java jar="${jar}" failonerror="true" fork="true">
                <sysproperty key="sbe.output.dir" value="@{outputdir}"/>
                <sysproperty key="sbe.target.language" value="@{targetlanguage}" unless:blank="@{targetlanguage}"/>
                <sysproperty key="sbe.target.namespace" value="@{targetnamespace}" unless:blank="@{targetnamespace}"/>
                <sysproperty key="sbe.generate.stubs" value="@{generatestubs}" unless:blank="@{generatestubs}"/>
                <sysproperty key="sbe.generate.ir" value="@{generateir}" unless:blank="@{generateir}"/>
                <sysproperty key="sbe.validation.xsd" value="@{validationxsd}" unless:blank="@{validationxsd}"/>
                <sysproperty key="sbe.validation.stop.on.error" value="@{stoponerror}" unless:blank="@{stoponerror}"/>
                <schemafiles/>
            </java>
        </sequential>
    </macrodef>

    <target name="generate:java:sbeir-stubs"
            depends="dist"
            description="Generate serialized IR stubs for Java">
        <sbetool outputdir="${dir.main.src}" targetlanguage="Java">
            <arg value="${dir.main.resources}/sbe-ir.xml"/>
        </sbetool>
    </target>

    <target name="generate:cpp98:sbeir-stubs"
            depends="dist"
            description="Generate serialized IR stubs for C++98">
        <sbetool outputdir="${dir.main.cpp.src}" targetlanguage="cpp98">
            <arg value="${dir.main.resources}/sbe-ir.xml"/>
        </sbetool>
    </target>

    <target name="generate:csharp:sbeir-stubs"
            depends="dist"
            description="Generate serialized IR stubs for C#">
        <sbetool outputdir="${dir.main.csharp.src}" targetlanguage="csharp"
            targetnamespace="Adaptive.SimpleBinaryEncoding.Ir.Generated">
            <arg value="${dir.main.resources}/sbe-ir.xml"/>
        </sbetool>
    </target>

    <target name="generate:sbeir-stubs"
            depends="generate:java:sbeir-stubs, generate:cpp98:sbeir-stubs, generate:csharp:sbeir-stubs"
            description="Generate serialized IR code for all languages"/>

    <!-- SBE Examples targets -->

    <property name="dir.examples.src" value="examples/java"/>
    <property name="dir.examples.resources" value="examples/resources"/>
    <property name="dir.gen.java" value="target/gen/java"/>
    <property name="dir.examples.build" location="target/examples/java/classes"/>

    <property name="dir.gen.cpp98" value="target/gen/cpp98"/>
    <property name="exec.example.cpp98" location="target/gen/cpp98/SbeExample"/>
    <property name="exec.example.otf.cpp98" location="target/gen/cpp98/SbeOtfDecoder"/>
    <property name="dir.examples.cpp98.src" location="examples/cpp98"/>
    <property name="dir.examples.cpp98.include" location="main/cpp"/>

    <path id="examples.classpath">
        <pathelement path="${dir.examples.build}"/>
        <fileset dir="${dir.dist}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <target name="examples:java"
            depends="dist">
        <mkdir dir="${dir.gen.java}"/>
        <mkdir dir="${dir.examples.build}"/>
        <sbetool outputdir="${dir.gen.java}" targetlanguage="Java" stoponerror="true"
            validationxsd="main/resources/fpl/SimpleBinary1-0.xsd">
            <arg value="${dir.examples.resources}/example-schema.xml"/>
            <arg value="${dir.examples.resources}/example-extension-schema.xml"/>
        </sbetool>
        <javac srcdir="${dir.gen.java}" destdir="${dir.examples.build}" includeAntRuntime="false" debug="true">
            <classpath refid="examples.classpath"/>
        </javac>
        <javac srcdir="${dir.examples.src}" destdir="${dir.examples.build}" includeAntRuntime="false" debug="true">
            <classpath refid="examples.classpath"/>
        </javac>
        <java classname="uk.co.real_logic.sbe.examples.ExampleUsingGeneratedStub" failonerror="true" fork="true">
            <classpath refid="examples.classpath"/>
        </java>
        <java classname="uk.co.real_logic.sbe.examples.ExampleUsingGeneratedStubExtension" failonerror="true" fork="true">
            <classpath refid="examples.classpath"/>
        </java>
        <java classname="uk.co.real_logic.sbe.examples.OtfExample" failonerror="true" fork="true">
            <classpath refid="examples.classpath"/>
        </java>
    </target>

    <target name="cpp:examples:gen"
            depends="dist"
            description="Generate and run C++ generated code example">
        <mkdir dir="${dir.gen.cpp98}"/>
        <sbetool outputdir="${dir.gen.cpp98}" targetlanguage="cpp98">
            <arg value="${dir.examples.resources}/example-schema.xml"/>
        </sbetool>
        <cc outtype="executable"
            debug="true"
            subsystem="console"
            outfile="${exec.example.cpp98}">
            <includepath path="${dir.examples.cpp98.src}"/>
            <includepath path="${dir.gen.cpp98}"/>
            <includepath path="${dir.examples.cpp98.include}"/>
            <compilerarg value="-std=c++98" unless="windows"/>
            <compilerarg value="/wd4514" if="windows"/>
            <compiler name="msvc" if="windows"/>
            <linker name="msvc" if="windows"/>
            <defineset if="windows">
                <define name="WIN32" value="1"/>
            </defineset>
            <defineset if="cpp.have.cmath">
                <define name="SBE_HAVE_CMATH" value="1"/>
            </defineset>
            <syslibset libs="stdc++"/>
            <fileset dir="${dir.examples.cpp98.src}" includes="SbeExample.cpp"/>
        </cc>
        <exec executable="${exec.example.cpp98}" failonerror="true"/>
    </target>

    <target name="cpp:examples:otf"
            depends="dist, examples:java, cpp:compile"
            description="Generate and run OTF C++ example">
        <sequential>
            <mkdir dir="${dir.gen.cpp98}"/>
            <cc outtype="executable"
                debug="true"
                subsystem="console"
                outfile="${exec.example.otf.cpp98}">
                <includepath path="${dir.examples.cpp98.src}"/>
                <includepath path="${dir.gen.cpp98}"/>
                <includepath path="${dir.examples.cpp98.include}"/>
                <compilerarg value="-std=c++98" unless="windows"/>
                <compilerarg value="-Wall" unless="windows"/>
                <compilerarg value="/wd4514" if="windows"/>
                <compiler name="msvc" if="windows"/>
                <linker name="msvc" if="windows"/>
                <defineset if="windows">
                    <define name="WIN32" value="1"/>
                </defineset>
                <defineset if="cpp.have.cmath">
                    <define name="SBE_HAVE_CMATH" value="1"/>
                </defineset>
               <syslibset libs="stdc++"/>
                <fileset dir="${dir.main.cpp.build}" includes="*.o*"/>
                <fileset dir="${dir.examples.cpp98.src}" includes="SbeOtfDecoder.cpp"/>
            </cc>
            <sbetool outputdir="${dir.gen.cpp98}" generatestubs="false" generateir="true">
                <arg value="${dir.examples.resources}/example-schema.xml"/>
            </sbetool>
            <java classname="uk.co.real_logic.sbe.examples.ExampleUsingGeneratedStub" failonerror="true" fork="true">
                <classpath refid="examples.classpath"/>
                <sysproperty key="sbe.encoding.filename" value="${dir.gen.cpp98}/Car.data"/>
            </java>
            <exec executable="${exec.example.otf.cpp98}" failonerror="true">
                <arg value="${dir.gen.cpp98}/example-schema.sbeir"/>
                <arg value="${dir.gen.cpp98}/Car.data"/>
            </exec>
        </sequential>
    </target>

    <target name="examples:cpp"
            depends="cpp:examples:gen, cpp:examples:otf"
            description="Compile and run C++98 examples"/>

    <target name="update:gtest" depends="">
        <sequential>
            <local name="gtest.name"/>
            <local name="sha.fail"/>
            <local name="cksum.fail"/>
            <property name="gtest.name" value="gtest-1.7.0.zip"/>
            <get dest="/tmp">
                <url url="https://googletest.googlecode.com/files/${gtest.name}"/>
            </get>
            <checksum file="/tmp/${gtest.name}"
                      algorithm="sha1"
                      property="f85f6d2481e2c6c4a18539e391aa4ea8ab0394af"
                      verifyproperty="sha.fail"/>
            <condition property="cksum.fail">
                <equals arg1="${sha.fail}" arg2="false"/>
            </condition>
            <fail if="cksum.fail">Checksum failed</fail>
            <copy file="/tmp/${gtest.name}" todir="test/lib"/>
        </sequential>
    </target>

    <target name="gtest:unzip" depends="init">
        <unzip src="test/lib/gtest-1.7.0.zip" dest="target/test/cpp"/>
    </target>

    <target name="gtest:compile" depends="gtest:unzip">
        <cc outtype="static"
            subsystem="console"
            debug="true"
            multithreaded="true"
            exceptions="true"
            objdir="${dir.gtest.build}">
            <compilerarg value="-Wall" unless="windows"/>
            <compilerarg value="-pthread" unless="windows"/>
            <includepath path="${dir.gtest.include}"/>
            <includepath path="${dir.gtest.src}"/>
            <compilerarg value="/wd4514" if="windows"/>
            <compiler name="msvc" if="windows"/>
            <defineset if="windows">
                <define name="WIN32" value="1"/>
            </defineset>
            <defineset if="cpp.have.cmath">
                <define name="SBE_HAVE_CMATH" value="1"/>
            </defineset>
            <fileset dir="${dir.gtest.src}">
                <include name="src/gtest-all.cc"/>
                <include name="src/gtest_main.cc"/>
            </fileset>
        </cc>
    </target>

    <target name="cpp:compile" depends="init">
        <cc outtype="static"
            debug="true"
            subsystem="console"
            objdir="${dir.main.cpp.build}">
            <includepath path="${dir.main.cpp.src}"/>
            <compilerarg value="-std=c++98" unless="windows"/>
            <compilerarg value="-Wall" unless="windows"/>
            <compilerarg value="/wd4514" if="windows"/>
            <compiler name="msvc" if="windows"/>
            <defineset if="windows">
                <define name="WIN32" value="1"/>
            </defineset>
            <defineset if="cpp.have.cmath">
                <define name="SBE_HAVE_CMATH" value="1"/>
            </defineset>
            <fileset dir="${dir.main.cpp.src}" includes="**/*.cpp"/>
        </cc>
    </target>

    <target name="cpp:test:codegen" depends="dist">
        <sequential>
            <mkdir dir="${dir.gen.cpp98}"/>
            <sbetool outputdir="${dir.gen.cpp98}" targetlanguage="cpp98" generateir="true">
                <arg value="${dir.test.resources}/code-generation-schema-cpp.xml"/>
                <arg value="${dir.test.resources}/composite-offsets-schema.xml"/>
                <arg value="${dir.test.resources}/message-block-length-test.xml"/>
            </sbetool>
            <copy file="${dir.gen.cpp98}/code-generation-schema-cpp.sbeir" todir="${dir.exec.test.cpp}"/>
            <copy file="${dir.gen.cpp98}/composite-offsets-schema.sbeir" todir="${dir.exec.test.cpp}"/>
            <copy file="${dir.gen.cpp98}/message-block-length-test.sbeir" todir="${dir.exec.test.cpp}"/>
        </sequential>
    </target>

    <target name="cpp:test" depends="init, cpp:compile, gtest:compile, cpp:test:codegen">
        <!-- all tests are placed in the main runner -->
        <cc outtype="executable"
            subsystem="console"
            debug="true"
            multithreaded="true"
            outfile="${exec.test.cpp}">
            <compilerarg value="-Wall" unless="windows"/>
            <compilerarg value="-pthread" unless="windows"/>
            <includepath path="${dir.gtest.include}"/>
            <includepath path="${dir.main.cpp.src}"/>
            <includepath path="${dir.test.cpp.include}"/>
            <includepath path="${dir.gen.cpp98}"/>
            <compilerarg value="/wd4514" if="windows"/>
            <compiler name="msvc" if="windows"/>
            <linker name="msvc" if="windows"/>
            <defineset if="windows">
                <define name="WIN32" value="1"/>
            </defineset>
            <defineset if="cpp.have.cmath">
                <define name="SBE_HAVE_CMATH" value="1"/>
            </defineset>
            <fileset dir="${dir.main.cpp.build}" includes="*.o*"/>
            <fileset dir="${dir.gtest.build}" includes="*.o*"/>
            <fileset dir="${dir.test.cpp.src}" includes="**/*Test.cpp"/>
            <syslibset libs="pthread, stdc++"/>
        </cc>
        <exec executable="${exec.test.cpp}" failonerror="true">
            <arg value="--gtest_color=no"/>
        </exec>
    </target>

    <target name="cpp" depends="cpp:test, cpp:doc, cpp:dist"/>
</project>
